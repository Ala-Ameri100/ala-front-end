{"version":3,"sources":["Components/InfoModal.js","Components/LoginModal.js","Components/SignupModal.js","Components/Navibar.js","Components/ChatBubble.js","Components/ChatBox.js","Context.js","Components/MsgBox.js","Components/InfoBox.js","Components/LoadindDots.js","Bot.js","App.js","serviceWorker.js","index.js"],"names":["InfoModal","props","Modal","show","modalOpen","onHide","handleModalOpen","Header","closeButton","Title","Body","reload","window","location","LoginModal","useState","username","setUsername","password","setPassword","signInRequest","errmsg","isloading","setloading","event","a","preventDefault","alert","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","message","localStorage","setItem","accessToken","handleLoginModalOpen","catch","lmodalOpen","onExit","backdrop","className","onSubmit","id","FormGroup","controlId","FormControl","autoFocus","required","value","onChange","e","target","type","aria-describedby","class","Button","variant","disabled","Spinner","animation","size","as","onClick","SignupModal","Username","Role","email","setEmail","signupRequest","useHistory","smodalOpen","handleSignupModalOpen","trim","NaviBar","setState","prevState","handleLogout","removeItem","state","userlogin","Navbar","Brand","href","alt","style","src","getItem","Nav","Item","color","Link","this","textDecoration","cursor","Component","bounceInAnimation","keyframes","bounceIn","IMges","styled","div","img","botMsg","Bubblediv","Bubble","clicks","Multioption","bubbleColor","bubbleOP","bubbleCursor","ChatBubble","process","choice","handleClick","text","React","Chat","ChatBox","setTimeout","messagesEnd","scrollIntoView","behavior","clickable","onCheck","chatArray","map","chat","index","key","msg","handleCheck","float","clear","ref","el","ApplicationContext","createContext","toggleListening","Msg","SpeechRecognition","webkitSpeechRecognition","recognition","lang","interimResults","maxAlternatives","MsgBox","modal","handleChange","bind","handleEnter","handleSend","startRecognition","onSend","context","start","onresult","speech","results","transcript","onend","Form","Control","placeholder","onKeyUp","contextType","MainDiv","CardDiv","doughnutData","labels","datasets","backgroundColor","hoverBackgroundColor","polarData","label","InfoBox","Card","width","boxShadow","AnsweredQuestions","maxValue","TotalQuestions","title","height","frameBorder","allow","allowFullScreen","BounceAnimation","DotWrapper","Dot","delay","LoadingDots","fadeInUp","Listening","ChatDiv","InfoDiv","Bot","listening","ShowBot","SelTopic","DBQuestions","CurrentQuestion","CurrentRowID","TotalCorrectedQuestions","Checkedval","isLoading","selectedvalue","selectedQoption","rdlevelchange","selectedmulti","atkon","chatData","Object","keys","forEach","push","pushToChat","val","RowID","count","AnsArray","length","rowID","parseInt","i","len","AnsKey","charAt","total","CurQuestionarr","currentComponent","questionText","MultipleAns","answerChoice1","FormControlLabel","control","Checkbox","correctAnswer","answerChoice2","answerChoice3","answerChoice4","answerChoice5","answerChoice6","answerChoice7","Radio","Qoptions","total2","CheckAnswer","answer_array","split","slice","currentRow","checkAns","includes","selTopic","answerDescription","Questions","UploadQuestions","temparr","diiflevels","name","Qlevels","temptoparr","thistopic","topic","Topic","handleSendMsg","toUpperCase","fetchTopic","fetchQuestionLevels","fetchQuestions","CheckForCorrectAns","UploadAnswer","checkMultiAns","componentDidMount","Provider","hidden","App","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89229b75.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst InfoModal = (props) => { \r\n    return (\r\n        <>\r\n          <Modal show={props.modalOpen} onHide={props.handleModalOpen}>\r\n              <Modal.Header closeButton>\r\n                 <Modal.Title>Info</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>ALA is a conversational AI. <br></br>ALA stands for Ameri Learning App</Modal.Body>\r\n              {/* <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={props.handleModalOpen}>\r\n                    Cancel\r\n                 </Button>\r\n                <Button variant=\"danger\" onClick={props.handleModalLogout}>\r\n                    Yes\r\n                 </Button> \r\n              </Modal.Footer> */}\r\n          </Modal>\r\n        </>\r\n     );\r\n}\r\n\r\nexport default InfoModal;","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Modal, Spinner } from 'react-bootstrap';\r\nimport { FormGroup, FormControl, Form } from \"react-bootstrap\";\r\nimport { Bot } from \"../Bot\";\r\nimport { wait } from \"@testing-library/react\";\r\n\r\nconst reload = () => window.location.reload();\r\n\r\nconst LoginModal = (props) => {\r\n  const SERVER_URL = '/api/auth/signin';\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  let signInRequest = {};\r\n  let errmsg = \"\";\r\n  const [userlogin, setuserlogin] = useState(\"\");\r\n  const [isloading, setloading] = useState(false);\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (username === \"\" || password === \"\") {\r\n      alert(\"Fields are required\");\r\n      return;\r\n    }\r\n    else {\r\n\r\n      setloading(true);\r\n\r\n      signInRequest = {\r\n        'username': username, 'password': password\r\n      }\r\n      const res = fetch(SERVER_URL, {\r\n        method: 'POST',\r\n        headers: { \"Content-Type\": \"application/json\", \"Access-Control-Origin\": \"*\" },\r\n        body: JSON.stringify(signInRequest)\r\n      })\r\n        .then((res) => res.json()).then((data) => {          \r\n          console.log('Error message', data.message)\r\n          errmsg = data.message;\r\n          console.log('Data after login', data.username)\r\n\r\n          if (errmsg === 'Bad credentials') {\r\n            console.log('Login Failed')\r\n            alert('Signin failed! Please try Again')\r\n          }\r\n          else {\r\n            console.log('Login Success')\r\n            localStorage.setItem('accessToken', data.accessToken);\r\n            localStorage.setItem('uname', data.username);\r\n            props.handleLoginModalOpen();\r\n\r\n            window.location.reload(false);\r\n          }\r\n\r\n          setloading(false);\r\n\r\n          // setuserlogin(data.username);\r\n        }).catch(() => {\r\n          // Only network error comes here\r\n          console.log('Im here')\r\n          // alert('User could not sign in!')\r\n        });\r\n\r\n\r\n      //.catch(() => alert('Could not register user!'));\r\n      console.log('Error message', errmsg)\r\n      //alert('Succesfully loggedin!');\r\n      //window.location.reload(false);\r\n    }\r\n  }\r\n\r\n  function handleClear(e) {\r\n    e.preventDefault();\r\n    // let cleardata=\"\";\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n    //console.log('The clear button was clicked.');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={props.lmodalOpen}\r\n        onHide={props.handleLoginModalOpen}\r\n        onExit={reload}\r\n        backdrop=\"static\">\r\n        <Modal.Header closeButton className=\"login-nav\">\r\n          <Modal.Title >Login</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"Login\">\r\n            <form onSubmit={handleSubmit} id=\"formid\">\r\n              <FormGroup controlId=\"username\" >\r\n                Username\r\n          <FormControl\r\n                  autoFocus\r\n                  required\r\n                  id=\"uname\"\r\n                  value={username}\r\n                  onChange={e => setUsername(e.target.value)}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" >\r\n                Password\r\n          <FormControl\r\n                  value={password}\r\n                  id=\"pwd\"\r\n                  required\r\n                  onChange={e => setPassword(e.target.value)}\r\n                  type=\"password\"\r\n                  aria-describedby=\"pwdHelp\"\r\n                />\r\n                <small id=\"pwdHelp\" class=\"text-muted\">\r\n                  Must be 6-40 characters long\r\n                </small>\r\n              </FormGroup>\r\n              {!isloading && <Button variant=\"primary\" type=\"submit\">\r\n                Login\r\n          </Button>}\r\n              {isloading && <Button variant=\"primary\" type=\"submit\" disabled>\r\n                <Spinner animation=\"border\" variant=\"light\" size=\"sm\" as=\"span\" /> Loading...\r\n          </Button>}\r\n              {' '}\r\n              <Button variant=\"secondary\" onClick={handleClear}>\r\n                Clear\r\n            </Button>\r\n            </form>\r\n          </div>\r\n        </Modal.Body>\r\n        {/* <Bot UseraccessToken={accessToken}></Bot> */}\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default LoginModal;","import { Modal } from 'react-bootstrap';\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, FormGroup, FormControl, Spinner } from \"react-bootstrap\";\r\n\r\nconst SignupModal = (props) => {\r\n  const SERVER_URL = '/api/auth/signup'\r\n  const [Username, setUsername] = useState(\"\");\r\n  const [Role, setRole] = useState('[\"mod\",\"user\"]');\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const history = useHistory();\r\n  let signupRequest = {};\r\n  let authenticated = false;\r\n  const [isloading, setloading] = useState(false);\r\n\r\n  function handleClear(e) {\r\n    e.preventDefault();\r\n    // let cleardata=\"\";\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n    setEmail(\"\");\r\n    //console.log('The clear button was clicked.');\r\n  }\r\n\r\n\r\n  function handleSubmit(event) {\r\n    console.log('Username', Username);\r\n    console.log('Role', Role);\r\n    console.log('email', email);\r\n    console.log('password', password);\r\n\r\n    event.preventDefault();\r\n    setloading(true);\r\n    signupRequest = {\r\n      'username': Username, 'password': password.trim(), 'email': email.trim(), 'role': [\"mod\", \"user\"]\r\n    }\r\n\r\n    console.log(\"signupRequest--->\" + JSON.stringify(signupRequest));\r\n    fetch(SERVER_URL, {\r\n      method: 'POST',\r\n      headers: { \"Content-Type\": \"application/json\", \"Access-Control-Origin\": \"*\" },\r\n      body: JSON.stringify(signupRequest)\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        authenticated = true\r\n\r\n        let errmsg = data.message;\r\n\r\n        if (errmsg === 'Error: Username is already taken!') {\r\n          alert('Username is already taken!')\r\n        }\r\n        else if (errmsg === 'Error: Email is already in use!') {\r\n          alert('Email is already in use!')\r\n        }\r\n        else if (errmsg === 'User registered successfully!') {\r\n          props.handleSignupModalOpen();\r\n          props.handleLoginModalOpen();\r\n        }\r\n        else {\r\n          alert('Enter valid Credentials!')\r\n        }\r\n        console.log('Error message', data.message)\r\n        console.log(\"response--\" + JSON.stringify(data))\r\n\r\n        setloading(false);\r\n      });\r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={props.smodalOpen}\r\n        onHide={props.handleSignupModalOpen}\r\n        backdrop=\"static\">\r\n        <Modal.Header closeButton className=\"login-nav\">\r\n          <Modal.Title>Sign Up</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"Login\">\r\n            <form onSubmit={handleSubmit}>\r\n              <FormGroup >\r\n                Username\r\n          <FormControl\r\n                  autoFocus\r\n                  value={Username}\r\n                  onChange={e => setUsername(e.target.value)}\r\n                  required\r\n                />\r\n              </FormGroup>\r\n              <FormGroup  >\r\n                Password\r\n          <FormControl\r\n                  value={password}\r\n                  onChange={e => setPassword(e.target.value)}\r\n                  required\r\n                  aria-describedby=\"pwdHelp\"\r\n                  type=\"password\"\r\n                />\r\n                <small id=\"pwdHelp\" class=\"text-muted\">\r\n                  Must be 6-40 characters long\r\n          </small>\r\n              </FormGroup>\r\n\r\n              <FormGroup controlId=\"email\" >\r\n                Email\r\n          <FormControl\r\n                  type=\"email\"\r\n                  value={email}\r\n                  onChange={e => setEmail(e.target.value)}\r\n                  required\r\n                />\r\n              </FormGroup>\r\n              {!isloading && <Button variant=\"primary\" type=\"submit\">\r\n                Signup\r\n    </Button>}\r\n              {isloading && <Button variant=\"primary\" type=\"submit\" disabled>\r\n                <Spinner animation=\"border\" variant=\"light\" size=\"sm\" as=\"span\" /> Loading...\r\n          </Button>}\r\n              {' '}\r\n              <Button variant=\"secondary\" onClick={handleClear}>\r\n                Clear\r\n        </Button>\r\n\r\n\r\n            </form>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignupModal;","import React, { Component , Fragment} from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { FaQuestionCircle, FaInfoCircle, FaSignInAlt,FaSignOutAlt, FaStreetView } from 'react-icons/fa';\r\nimport InfoModal from './InfoModal'\r\nimport LoginModal from './LoginModal'\r\nimport SignupModal from './SignupModal'\r\n \r\nexport default class NaviBar extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modalOpen: false,\r\n            lmodalOpen: false,\r\n            smodalOpen: false,\r\n            userlogin: 'Guest'\r\n        }\r\n    }\r\n \r\n    handleModalOpen = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                modalOpen: !prevState.modalOpen,\r\n            }\r\n        })\r\n    }\r\n\r\n    handleLogout=()=>{\r\n        console.log('inside logout')\r\n        localStorage.setItem('accessToken',\"\")\r\n        localStorage.removeItem('uname')\r\n        \r\n        this.handleLoginModalOpen();\r\n    }\r\n    \r\n    handleLoginModalOpen = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                lmodalOpen: !prevState.lmodalOpen\r\n            }\r\n        })\r\n    }\r\n\r\n     handleSignupModalOpen = () => {\r\n         this.setState((prevState) => {\r\n            return {\r\n               smodalOpen: !prevState.smodalOpen\r\n            }\r\n       })\r\n     }\r\n \r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar className=\"color-nav\" >\r\n                    <Navbar.Brand href=\"/\" className=\"ameri-logo\" >\r\n                        <img alt=\"Ameri100\" style={{ \"width\": \"7rem\", \"marginBottom\": \"5px\",  }} src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Ameri100_logo.png/320px-Ameri100_logo.png\"></img>\r\n                    </Navbar.Brand>\r\n                    <div>\r\n                    {localStorage.getItem('uname')? \r\n                    <Nav.Item style={{color: \"white\"}}>Hi {localStorage.getItem('uname')} ! </Nav.Item>: <Nav.Item></Nav.Item>\r\n                     }\r\n                    </div>\r\n                    <hr />\r\n\r\n                    {localStorage.getItem('accessToken')? \r\n                    <Nav.Link onClick={this.handleLogout} style={{color: \"white\", textDecoration: 'none'}}><FaSignOutAlt></FaSignOutAlt> Logout</Nav.Link>:\r\n                    <Fragment><Nav.Link onClick={this.handleLoginModalOpen} style={{color: \"white\", textDecoration: 'none'}}><FaSignInAlt></FaSignInAlt> Login</Nav.Link>\r\n                    <Nav.Link onClick={this.handleSignupModalOpen} style={{color: \"white\", textDecoration: 'none'}}><FaStreetView></FaStreetView> Signup</Nav.Link> </Fragment>\r\n                    }                   \r\n \r\n                    <div className=\"upload-icon\">                    \r\n                        <FaQuestionCircle className=\"faq-icon\" size=\"1.5em\" cursor=\"pointer\" />\r\n                        <FaInfoCircle className=\"fai-icon\" size=\"1.5em\" cursor=\"pointer\" onClick={this.handleModalOpen} />\r\n                    </div>\r\n \r\n                </Navbar>\r\n                <InfoModal\r\n                    modalOpen={this.state.modalOpen}\r\n                    handleModalOpen={this.handleModalOpen}\r\n                />\r\n                <LoginModal\r\n                lmodalOpen={this.state.lmodalOpen}\r\n                handleLoginModalOpen={this.handleLoginModalOpen}\r\n                />\r\n                <SignupModal\r\n                smodalOpen={this.state.smodalOpen}\r\n                handleSignupModalOpen={this.handleSignupModalOpen}\r\n                handleLoginModalOpen={this.handleLoginModalOpen}\r\n            />\r\n            </>\r\n        )\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { bounceIn } from 'react-animations';\r\nimport { Checkbox, useIsFocusVisible, Radio } from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\n\r\nconst bounceInAnimation = keyframes`${bounceIn}`;\r\n\r\nconst TypingBalls = styled.div`\r\n    margin: 32px;\r\n    span {\r\n      width: 10px;\r\n      height: 10px;\r\n      background-color: black;\r\n      display: inline-block;\r\n      margin: 1px;\r\n      border-radius: 50%;\r\n      &:nth-child(1) {\r\n        animation: bounce 1s infinite;\r\n      }\r\n      &:nth-child(2) {\r\n        animation: bounce 1s infinite .2s;\r\n      }\r\n      &:nth-child(3) {\r\n        animation: bounce 1s infinite .4s;\r\n      }\r\n    }\r\n    @keyframes bounce {\r\n        0% {\r\n          transform: translateY(0px);\r\n        }\r\n        50% {\r\n          transform: translateY(8px);\r\n        }\r\n        100% {\r\n          transform: translateY(0px);\r\n        }\r\n      }\r\n      \r\n`;\r\nconst IMges=styled.img`\r\n    visibility:${props => props.botMsg ? 'visible' : 'Hidden'};\r\n    width:40px;\r\n    height:50px;\r\n`;\r\n\r\nconst Bubblediv = styled.div`\r\n    min-width: 30%;\r\n    max-width: 100%;\r\n    align-self: ${props => props.botMsg ? \"flex-start\" : \"flex-end\"};\r\n\r\n`;\r\nconst Bubble = styled.div`\r\n    min-width: 20%;\r\n    max-width: 90%;\r\n    background-color: ${props => bubbleColor(props)};\r\n    border-radius: ${props => props.botMsg ? \"0px 7px 7px 7px\" : \"7px 0px 7px 7px\"};\r\n    margin: 5px;\r\n    align-self: ${props => props.botMsg ? \"flex-start\" : \"flex-end\"};\r\n    // box-shadow: 0px 2px 15px ;\r\n    box-shadow: 0px 3px 5px ; \r\n    p {\r\n        padding: 5px;\r\n        color: white;\r\n    }\r\n\r\n    &:hover {\r\n      opacity: ${props => bubbleOP(props)};\r\n      cursor: ${props => bubbleCursor(props)};\r\n      }\r\n    animation: 0.5s ${bounceInAnimation};\r\n`;\r\n\r\n\r\nfunction bubbleOP(props) {\r\n    if (props.clicks) {\r\n        return 0.75;\r\n    } else if(props.Multioption){\r\n       return 0.75;\r\n    }\r\n    else if (props.botMsg) {\r\n        return \"#0069d9\";\r\n    } else {\r\n        return \"#989898\";\r\n    }\r\n    \r\n}\r\n\r\nfunction bubbleColor(props) {\r\n  if (props.clicks) {\r\n      return \"#28a745\";\r\n  } else if(props.Multioption){\r\n      return \"#e68a00\"\r\n  }\r\n  else if (props.botMsg) {\r\n      return \"#0069d9\";\r\n  } else {\r\n      return \"#989898\";\r\n  }\r\n  \r\n}\r\n\r\nfunction bubbleCursor(props) {\r\n  if (props.clicks) {\r\n      return 'pointer';\r\n  } else if(props.Multioption){\r\n      return 'pointer'\r\n  }\r\n  else if (props.botMsg) {\r\n      return '';\r\n  } else {\r\n      return '';\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport class ChatBubble extends React.Component{\r\n    \r\n  render(){\r\n      return(\r\n\r\n\r\n      <Bubblediv botMsg={this.props.botMsg} className=\"divBub\">\r\n\r\n         <IMges botMsg={this.props.botMsg} src={`${process.env.PUBLIC_URL}/assets/logobot.png`}></IMges>\r\n             <Bubble choice={this.props.choice} botMsg={this.props.botMsg} clicks={this.props.clicks} onClick={() => this.props.handleClick(this.props.text)} >\r\n              \r\n              {/* <TypingBalls>\r\n                  <span></span>\r\n                  <span></span>\r\n                  <span></span>\r\n              </TypingBalls> */}\r\n             {/* <Bubble Multioption={props.Multioption} choice={props.choice} botMsg={props.botMsg} clicks={props.clicks} onClick={() => props.handleClick(props.text)}>  */}\r\n              {/* {this.props.Multioption ?\r\n              <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label={this.props.text}\r\n              value={this.props.choice}\r\n            />: */}\r\n              <p>{this.props.text}</p>\r\n      </Bubble>\r\n      </Bubblediv>      \r\n      )\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport { ChatBubble } from './ChatBubble';\r\n\r\nconst Chat = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    height: 85%;\r\n    overflow-y: auto;\r\n    padding: 5px;\r\n    margin-bottom: 10px;\r\n    border-radius: 5%;\r\n    \r\n`;\r\n\r\nexport class ChatBox extends Component {\r\n\r\n    componentDidUpdate() {\r\n        setTimeout(() => {\r\n            this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n        }, 500);\r\n    }\r\n\r\n    handleClick(value, clickable) {\r\n        console.log('Inside handle click',value);\r\n        if (clickable) this.props.onClick(value);\r\n        \r\n    }\r\n    handleCheck(value, Multioption){\r\n        if(Multioption) {\r\n            this.props.onCheck(value);\r\n            console.log('Option is',value )\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Chat id=\"chatDiv\">\r\n                {this.props.chatArray.map((chat, index) => {\r\n                    //console.log(\"chat--->\"+JSON.stringify(chat)+\"--index-->\"+index)\r\n                    return <ChatBubble key={index} text={chat.msg} botMsg={chat.botMsg} choice={chat.choice} clicks={chat.clickable} handleClick={(value) => this.handleClick(value, chat.clickable)} handleCheck={(value)=>this.handleCheck(value, chat.Multioption)}></ChatBubble>\r\n                })}\r\n                <div style={{ float: \"left\", clear: \"both\" }}\r\n                    ref={(el) => { this.messagesEnd = el; }}>\r\n                </div>\r\n            </Chat>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport const ApplicationContext = React.createContext({\r\n    toggleListening: () => { }\r\n});","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport { Button, Form, Modal } from 'react-bootstrap';\r\nimport { FaMicrophoneAlt, FaTelegramPlane } from 'react-icons/fa';\r\nimport { ApplicationContext } from '../Context';\r\n\r\n\r\nconst Msg = styled.div`\r\n    display: flex;\r\n    min-height: 15%;\r\n    width: 100%;\r\n    /* min-width: 150px;\r\n    max-width: 500px; */\r\n    align-items: end;\r\n    padding: 5px;\r\n    padding:10px;\r\n\r\n    textarea {\r\n        resize: none;\r\n        width: 100%;\r\n        height: 100%;\r\n        margin: 0px 5px 0px 5px;\r\n        \r\n        /*box-shadow: 0px 5px 5px  grey;*/\r\n    }\r\n    \r\n    div {\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n\r\n        button {\r\n            margin: 5px;\r\n            // box-shadow: 0px 5px 5px  grey;\r\n        }\r\n    }\r\n`;\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst recognition = SpeechRecognition ? new SpeechRecognition() : null;\r\nif (recognition) {\r\n    recognition.lang = 'en-IN';\r\n    recognition.interimResults = false;\r\n    recognition.maxAlternatives = 1;\r\n}\r\n\r\nexport class MsgBox extends Component {\r\n\r\n    static contextType = ApplicationContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: \"\",\r\n            modal: { show: false },\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleEnter = this.handleEnter.bind(this);\r\n        this.handleSend = this.handleSend.bind(this);\r\n        this.startRecognition = this.startRecognition.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleEnter(event) {\r\n        if (event.key === 'Enter') {\r\n            this.handleSend();\r\n        }\r\n    }\r\n\r\n    handleSend() {\r\n        // const { toggleListening } = this.context;\r\n        // toggleListening();\r\n        const value = this.state.value;\r\n        this.props.onSend(value);\r\n        this.setState({\r\n            value: \"\"\r\n        });\r\n    }\r\n\r\n    startRecognition() {\r\n        const { toggleListening } = this.context;\r\n        if (recognition) {\r\n            toggleListening();\r\n            recognition.start();\r\n            console.log('listening...');\r\n            recognition.onresult = event => {\r\n                let speech = event.results[0][0].transcript;\r\n                // console.log(speech);\r\n                this.setState({ value: speech });\r\n                // this.setState({ value: speech }, this.handleSend);\r\n            };         \r\n            recognition.onend = () => { \r\n                console.log('Speech error');\r\n                toggleListening();\r\n            };\r\n        } else {\r\n            this.setState({ modal: { show: true } })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                \r\n                <Msg>\r\n                    {/* <textarea placeholder=\"Enter your message....\" value={this.state.value} onKeyUp={this.handleEnter} onChange={this.handleChange}></textarea> */}\r\n                    <Form.Control as=\"textarea\" style={{\"box-shadow\": \"0px 3px 15px\"}} placeholder=\"Enter your message....\" value={this.state.value} onKeyUp={this.handleEnter} onChange={this.handleChange} />\r\n                    <div>\r\n                        <Button style={{\"box-shadow\": \"0px 3px 15px\"}} variant=\"outline-primary\" onClick={this.handleSend}><FaTelegramPlane size=\"1.5em\" /></Button>\r\n                        <Button style={{\"box-shadow\": \"0px 3px 15px\"}} variant=\"outline-success\" onClick={this.startRecognition}><FaMicrophoneAlt size=\"1.5em\" /></Button>\r\n                    </div>\r\n                </Msg>\r\n\r\n                <Modal show={this.state.modal.show} onHide={() => this.setState({ modal: { show: false } })}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Oops!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <p>Speech recognition not supported by browser.</p>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Doughnut, Polar } from 'react-chartjs-2';\r\nimport ReactStoreIndicator from 'react-score-indicator'\r\n\r\nconst MainDiv = styled.div`\r\n    display: flex;\r\n    height: calc(100vh - 58px);\r\n    overflow-y: auto;\r\n    justify-content: center;\r\n`;\r\n\r\nconst CardDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 80%;\r\n`;\r\n\r\nconst doughnutData = {\r\n    labels: [\r\n        'MERN',\r\n        'LAMP',\r\n        'MEAN'\r\n    ],\r\n    datasets: [{\r\n        data: [300, 50, 100],\r\n        backgroundColor: [\r\n            '#FF6384',\r\n            '#36A2EB',\r\n            '#FFCE56'\r\n        ],\r\n        hoverBackgroundColor: [\r\n            '#FF6384',\r\n            '#36A2EB',\r\n            '#FFCE56'\r\n        ]\r\n    }]\r\n};\r\n\r\nconst bubbleData = {\r\n    datasets: [\r\n        {\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: [\r\n                { x: 65, y: 75, r: 10 },\r\n                { x: 59, y: 49, r: 100 },\r\n                { x: 80, y: 90, r: 50 },\r\n                { x: 81, y: 29, r: 20 },\r\n                { x: 56, y: 36, r: 100 },\r\n                { x: 55, y: 25, r: 20 },\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nconst polarData = {\r\n    datasets: [{\r\n        data: [\r\n            11,\r\n            16,\r\n            7,\r\n            3,\r\n            14\r\n        ],\r\n        backgroundColor: [\r\n            '#FF6384',\r\n            '#4BC0C0',\r\n            '#FFCE56',\r\n            '#E7E9ED',\r\n            '#36A2EB'\r\n        ],\r\n        label: 'My dataset' // for legend\r\n    }],\r\n    labels: [\r\n        'Not Interested',\r\n        'Less Interested',\r\n        'Neutral',\r\n        'Interested',\r\n        'Most Interested'\r\n    ]\r\n};\r\n\r\nconst radarData = {\r\n    labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n    datasets: [\r\n        {\r\n            label: 'My First dataset',\r\n            backgroundColor: 'rgba(179,181,198,0.2)',\r\n            borderColor: 'rgba(179,181,198,1)',\r\n            pointBackgroundColor: 'rgba(179,181,198,1)',\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: 'rgba(179,181,198,1)',\r\n            data: [65, 59, 90, 81, 56, 55, 40]\r\n        },\r\n        {\r\n            label: 'My Second dataset',\r\n            backgroundColor: 'rgba(255,99,132,0.2)',\r\n            borderColor: 'rgba(255,99,132,1)',\r\n            pointBackgroundColor: 'rgba(255,99,132,1)',\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n            data: [28, 48, 40, 19, 96, 27, 100]\r\n        }\r\n    ]\r\n};\r\n\r\nexport const InfoBox = (props)=> {\r\n\r\n        return (\r\n            <>\r\n                {/* <h1> Performance Charts </h1>\r\n                <Row>\r\n                    <Col>\r\n                        <Doughnut data={doughnutData} />\r\n                    </Col>\r\n                    <Col>\r\n                        <Bubble data={bubbleData} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Polar data={polarData} />\r\n                    </Col>\r\n                    <Col>\r\n                        <Radar data={radarData} />\r\n                    </Col>\r\n                </Row> */}\r\n                <MainDiv>\r\n                    <CardDiv>\r\n                        <Card style={{ width: '80%',boxShadow:'0px 5px 5px  grey', backgroundColor:'#f5f5ef' }}>\r\n                            <Card.Body>\r\n                                <Card.Title>Score board</Card.Title>\r\n                                <ReactStoreIndicator\r\n                                    value={props.AnsweredQuestions}\r\n                                    maxValue={props.TotalQuestions}\r\n                                />\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <br></br>\r\n                        <Card style={{ width: '80%', boxShadow:'0px 5px 5px  grey', backgroundColor:'#f5f5ef' }}>\r\n                            <Card.Body>\r\n                                <Card.Title>Stack Share</Card.Title>\r\n                                <Doughnut data={doughnutData} />\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <br></br>\r\n                        <Card style={{ width: '80%', boxShadow:'0px 5px 5px  grey', backgroundColor:'#f5f5ef' }}>\r\n                            <Card.Body>\r\n                                <Card.Title>HANA EDGE</Card.Title>\r\n                                <div style={{ \"display\": \"flex\", \"justifyContent\": \"center\" }}>\r\n                                    <iframe title=\"hanaEdge\" width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/v0wiWJETQVw\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <br></br>\r\n                        <Card style={{ width: '80%', boxShadow:'0px 5px 5px  grey', backgroundColor:'#f5f5ef' }}>\r\n                            <Card.Body>\r\n                                <Card.Title>User Sentiment</Card.Title>\r\n                                <Polar data={polarData} />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </CardDiv>\r\n                </MainDiv>\r\n            </>\r\n        )\r\n    \r\n}","import React, { Component } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst BounceAnimation = keyframes`\r\n  0% { margin-bottom: 0; }\r\n  50% { margin-bottom: 10px }\r\n  100% { margin-bottom: 0 }\r\n`;\r\n\r\nconst DotWrapper = styled.div`\r\n  display: flex;\r\n  align-items: flex-end;\r\n`;\r\n\r\nconst Dot = styled.div`\r\n  background-color: #45cafc;\r\n  border-radius: 50%;\r\n  width: 10px;\r\n  height: 10px;\r\n  margin: 0 5px;\r\n\r\n  /* Animation */\r\n  animation: ${BounceAnimation} 0.5s linear infinite;\r\n  animation-delay: ${props => props.delay};\r\n`;\r\n\r\nclass LoadingDots extends Component {\r\n\r\n  render() \r\n  {\r\n    return(\r\n        <DotWrapper>\r\n        <Dot delay=\"0s\" />\r\n        <Dot delay=\".1s\" />\r\n        <Dot delay=\".2s\" />\r\n      </DotWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadingDots","import React, { Component } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n//import styled from 'styled-components';\r\nimport NaviBar from './Components/Navibar';\r\nimport { ChatBox } from './Components/ChatBox';\r\nimport { MsgBox } from './Components/MsgBox';\r\nimport { InfoBox } from './Components/InfoBox';\r\nimport { ApplicationContext } from './Context';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { fadeInUp } from 'react-animations';\r\nimport LoginModal from './Components/LoginModal';\r\nimport LoadingDots from './Components/LoadindDots';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { Checkbox, useIsFocusVisible, Radio } from '@material-ui/core';\r\n\r\nconst bounceInAnimation = keyframes`${fadeInUp}`;\r\nconst MainDiv = styled.div`\r\n    display: flex;\r\n    height: calc(100vh - 58px);\r\n    padding:30px;\r\n`;\r\n\r\nconst Listening = styled.div`\r\n    display : block;\r\n    position : fixed;\r\n    z-index: 100;\r\n    background-image : url(\"/assets/listening2.gif\");\r\n    /* background-color: black; */\r\n    background-color: #120724;\r\n    opacity : 0.5;\r\n    background-repeat : no-repeat;\r\n    background-position : center;\r\n    left : 0;\r\n    bottom : 0;\r\n    right : 0;\r\n    top : 0;\r\n`;\r\n\r\nconst ChatDiv = styled.div`\r\n    // background-color:#A9A9A9;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 35%;\r\n    margin-left:30px\r\n    border-radius: 0.5rem;\r\n    animation: 1.0s ${bounceInAnimation};\r\n    transition-timing-function: linear;\r\n    box-shadow: 0px 3px 15px ;\r\n    // background: linear-gradient(#abbaab, #ffffff);\r\n    header{\r\n        \r\n        width:100%;\r\n        height:15%;\r\n        position:relative;\r\n        background-image: linear-gradient(to right, #303f9f,#45cafc);\r\n        border-top-left-radius:10px;\r\n        border-top-right-radius:10px;\r\n        border-bottom-left-radius: 50% 20%;\r\n        border-bottom-right-radius: 50% 20%;\r\n        color: white;\r\n        font-size: 30px;\r\n        text-align: center;\r\n        font-family: \"Times New Roman\", Times, serif;\r\n      }\r\n`;\r\n\r\nconst InfoDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n`;\r\n\r\n\r\nexport class Bot extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chatArray: [],\r\n            listening: true,\r\n            ShowBot: true,\r\n            SelTopic: [],\r\n            DBQuestions: [],\r\n            CurrentQuestion: [],\r\n            CurrentRowID: [],\r\n            TotalCorrectedQuestions: [\r\n                { AnsweredQuestions: 0, TotalQuestions: 0 }\r\n            ],\r\n            Checkedval: [],\r\n            isLoading: false,\r\n            selectedvalue: '',\r\n            selectedQoption: ''\r\n        };\r\n        this.rdlevelchange = this.rdlevelchange.bind(this);\r\n        this.selectedmulti = this.selectedmulti.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let atkon = localStorage.getItem('accessToken')\r\n\r\n        fetch('/api/v1/welcome').then((res) => res.json()).then((data) => {\r\n            console.log('data', data)\r\n            let chatData = this.state.chatArray\r\n            Object.keys(data).forEach(function (key) {\r\n\r\n                console.log('inside compdidmount', atkon)\r\n                if (atkon !== \"\") {\r\n                    console.log('inside if')\r\n\r\n                    chatData.push({\r\n                        msg: data[key].message,\r\n                        clickable: data[key].clickable,\r\n                        botMsg: true,\r\n                        Multioption: false\r\n                    });\r\n                }\r\n                else {\r\n                    console.log('inside else')\r\n                    chatData.push({\r\n                        msg: data[key].message,\r\n                        clickable: false,\r\n                        botMsg: true,\r\n                        Multioption: false\r\n                    });\r\n                }\r\n                //console.log(\"key-->\"+key)\r\n            });\r\n\r\n            if (atkon == \"\") {\r\n                chatData.push({\r\n                    msg: 'Please login',\r\n                    botMsg: true,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n            }\r\n            this.pushToChat(chatData);\r\n        });\r\n    }\r\n\r\n    pushToChat(data) {\r\n        let chatArray = this.state.chatArray;\r\n        this.setState({ chatArray: data });\r\n    }\r\n\r\n    rdlevelchange(e) {\r\n        this.setState({ selectedvalue: e.target.value });\r\n        console.log('selected event ', e.target.value)\r\n        // console.log('selected option',this.state.)\r\n    }\r\n\r\n    selectedmulti(e){\r\n         let Checkedval = this.state.Checkedval;\r\n         Checkedval.push({\r\n             val: e.target.value\r\n         });      \r\n         this.setState({ Checkedval: Checkedval });\r\n    }\r\n\r\n    //Upload answer to chatArray when user clicks on see answer\r\n    UploadAnswer() {\r\n        let RowID;\r\n        let count = 1;\r\n        let AnsArray = [];\r\n        let chatData = this.state.chatArray;\r\n        let CurrentQuestion = this.state.CurrentQuestion;\r\n        if (this.state.CurrentRowID.length) {\r\n            //console.log('CurrentRowID.length-1',this.state.CurrentRowID.length-1)\r\n            RowID = this.state.CurrentRowID[this.state.CurrentRowID.length - 1].rowID;\r\n        }\r\n        else {\r\n            RowID = -1;\r\n        }\r\n        Object.keys(CurrentQuestion).forEach(function (key) {\r\n            key = parseInt(RowID) + 1;\r\n            console.log('key', key)\r\n            if (count > 0) {\r\n                for (let i = 0, len = CurrentQuestion[key].AnsKey.length; i < len; i += 1) {\r\n                    AnsArray.push({\r\n                        value: CurrentQuestion[key].AnsKey.charAt(i) - 1\r\n                    });\r\n                    //AnsArray.push(+CurrentQuestion[key].AnsKey.charAt(i)); \r\n                    console.log('AnsArray', AnsArray)\r\n                }\r\n                for (let i = 0; i < AnsArray.length; i++) {\r\n                    console.log('AnsArray[i].value', AnsArray[i].value);\r\n                    chatData.push({\r\n                        msg: CurrentQuestion[AnsArray[i].value].msg,\r\n                        botMsg: true,\r\n                        clickable: false,\r\n                        Multioption: false\r\n                    });\r\n                }\r\n                chatData.push({\r\n                    msg: \"Next Question\",\r\n                    botMsg: true,\r\n                    clickable: true,\r\n                    Multioption: false\r\n                });\r\n            }\r\n            count--;\r\n        });\r\n        this.setState({ chatArray: chatData });\r\n    }\r\n\r\n    //Function to upload questions to chatarray\r\n    UploadQuestions(msg) {\r\n        let total;\r\n        let TotalCorrectedQuestions = this.state.TotalCorrectedQuestions;\r\n        let CurrentQuestion = [];\r\n        let RowID;\r\n        console.log('DBQuestions', this.state.DBQuestions);\r\n        let DBQuestions = this.state.DBQuestions;\r\n        let chatData = this.state.chatArray;\r\n        console.log('Inside uploadQuestions', CurrentQuestion)\r\n        let count = 1;\r\n\r\n        let CurQuestionarr = [];\r\n        //Checking fo rowID to upload next questions\r\n        //If the rowID is undefined then it will starts from begining\r\n        //IF rowID is not zero then upload next question\r\n        if (this.state.CurrentRowID.length) {\r\n            console.log('CurrentRowID.length-1', this.state.CurrentRowID.length - 1)\r\n            let CurrentRowID = this.state.CurrentRowID[this.state.CurrentRowID.length - 1].rowID\r\n            console.log('CurrentRowID', typeof CurrentRowID);\r\n            console.log('DBQuestions', DBQuestions)\r\n            console.log('DBQuestions', typeof DBQuestions.length);\r\n            if (parseInt(CurrentRowID) + 1 >= this.state.DBQuestions.length) {\r\n                chatData.push({\r\n                    msg: 'Done with the questions, please select another topic',\r\n                    botMsg: true,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                chatData.push({\r\n                    msg: 'Topic',\r\n                    botMsg: true,\r\n                    clickable: true,\r\n                    Multioption: false\r\n                });\r\n                this.setState({ chatArray: chatData });\r\n                return;\r\n            }\r\n            else {\r\n                RowID = CurrentRowID;\r\n            }\r\n        }\r\n        else {\r\n            RowID = -1;\r\n        }\r\n        //Looping DBquestion to insert that to current question\r\n\r\n        let currentComponent = this;\r\n\r\n        Object.keys(DBQuestions).forEach(function (key) {\r\n            key = parseInt(RowID) + 1;\r\n            console.log('key', key)\r\n            if (count > 0) {\r\n                console.log('count', count)\r\n\r\n                // let selectedQoption = this.state.selectedQoption;\r\n\r\n                if (DBQuestions[key].questionText !== \"\") {\r\n                    console.log('DBQuestions[key].questionText', DBQuestions[key].questionText)\r\n                    chatData.push({\r\n                        msg: DBQuestions[key].questionText,\r\n                        botMsg: true,\r\n                        clickable: false,\r\n                    });\r\n                }\r\n\r\n                if (DBQuestions[key].MultipleAns == true) {\r\n\r\n                    if (DBQuestions[key].answerChoice1 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice1}\r\n                                value={1}\r\n                                onChange={currentComponent.selectedmulti}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice1,\r\n                            key: key,\r\n                            choice: 1,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n        \r\n                    }\r\n\r\n                    if (DBQuestions[key].answerChoice2 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice2}\r\n                                value={2}\r\n                                onChange={currentComponent.selectedmulti}\r\n                                \r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice2,\r\n                            key: key,\r\n                            choice: 2,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n        \r\n                    }\r\n                    if (DBQuestions[key].answerChoice3 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice3}\r\n                                value={3}\r\n                                onChange={currentComponent.selectedmulti}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice3,\r\n                            key: key,\r\n                            choice: 3,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n\r\n\r\n                    if (DBQuestions[key].answerChoice4 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice4}\r\n                                value={4}\r\n                                onChange={currentComponent.selectedmulti}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice4,\r\n                            key: key,\r\n                            choice: 4,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n                    if (DBQuestions[key].answerChoice5 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice5}\r\n                                value={5}\r\n                                onChange={currentComponent.selectedmulti}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice5,\r\n                            key: key,\r\n                            choice: 5,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n                    if (DBQuestions[key].answerChoice6 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice6}\r\n                                value={6}\r\n                                onChange={currentComponent.selectedmulti}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice6,\r\n                            key: key,\r\n                            choice: 6,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n\r\n                    if (DBQuestions[key].answerChoice7 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice7}\r\n                                value={7}\r\n                                onChange={currentComponent.selectedmulti}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice7,\r\n                            key: key,\r\n                            choice: 7,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n\r\n                }\r\n                else \r\n                {\r\n\r\n\r\n\r\n                    if (DBQuestions[key].answerChoice1 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Radio\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice1}\r\n                                value={DBQuestions[key].answerChoice1}\r\n                                onChange={e => currentComponent.setState({ selectedQoption: e.target.value })}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice1,\r\n                            key: key,\r\n                            choice: 1,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n\r\n                    if (DBQuestions[key].answerChoice2 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Radio\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice2}\r\n                                value={DBQuestions[key].answerChoice2}\r\n                                onChange={e => currentComponent.setState({ selectedQoption: e.target.value })}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice2,\r\n                            key: key,\r\n                            choice: 2,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n                    if (DBQuestions[key].answerChoice3 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Radio\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice3}\r\n                                value={DBQuestions[key].answerChoice3}\r\n                                onChange={e => currentComponent.setState({ selectedQoption: e.target.value })}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice3,\r\n                            key: key,\r\n                            choice: 3,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n\r\n\r\n                    if (DBQuestions[key].answerChoice4 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Radio\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice4}\r\n                                value={DBQuestions[key].answerChoice4}\r\n                                onChange={e => currentComponent.setState({ selectedQoption: e.target.value })}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice4,\r\n                            key: key,\r\n                            choice: 4,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n                    if (DBQuestions[key].answerChoice5 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Radio\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice5}\r\n                                value={DBQuestions[key].answerChoice5}\r\n                                onChange={e => currentComponent.setState({ selectedQoption: e.target.value })}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice5,\r\n                            key: key,\r\n                            choice: 5,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n                    if (DBQuestions[key].answerChoice6 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Radio\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice6}\r\n                                value={DBQuestions[key].answerChoice6}\r\n                                onChange={e => currentComponent.setState({ selectedQoption: e.target.value })}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice6,\r\n                            key: key,\r\n                            choice: 6,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n\r\n                    if (DBQuestions[key].answerChoice7 !== \"\") {\r\n                        CurQuestionarr.push(\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Radio\r\n                                    />\r\n                                }\r\n                                label={DBQuestions[key].answerChoice7}\r\n                                value={DBQuestions[key].answerChoice7}\r\n                                onChange={e => currentComponent.setState({ selectedQoption: e.target.value })}\r\n                            />\r\n                        );\r\n                        CurrentQuestion.push({\r\n                            msg: DBQuestions[key].answerChoice7,\r\n                            key: key,\r\n                            choice: 7,\r\n                            AnsKey: DBQuestions[key].correctAnswer,\r\n                        });\r\n                    }\r\n                }\r\n\r\n               // currentComponent.setState({Checkedval:Checkedval})\r\n\r\n                chatData.push({\r\n                    msg: CurQuestionarr,\r\n                    botMsg: true, //To know it is bot message\r\n                    //clickable: DBQuestions[key].MultipleAns ? false : true, //Making bubble as clickable\r\n                    clickable: false,\r\n                    key: key, //Inserting row number\r\n                    choice: 1, //Making this option as 1\r\n                    AnsKey: DBQuestions[key].correctAnswer, //Inserting answer key for future use\r\n                    Qoptions: true, //To determine it is a option\r\n                    Multioption: DBQuestions[key].MultipleAns ? true : false\r\n                });\r\n\r\n                \r\n                if (DBQuestions[key].MultipleAns == true) {\r\n                    chatData.push({\r\n                        msg: \"Submit\",\r\n                        botMsg: true,\r\n                        clickable: true\r\n                    });\r\n                }\r\n                else {\r\n                    chatData.push({\r\n                        msg: \"Submit Option\",\r\n                        botMsg: true,\r\n                        clickable: true\r\n                    });\r\n                }\r\n\r\n                total = TotalCorrectedQuestions[0].TotalQuestions + 1;\r\n                TotalCorrectedQuestions[0].TotalQuestions = total;\r\n                console.log('Total', total);\r\n\r\n                //TotalCorrectedQuestions = TotalCorrectedQuestions[0].TotalQuestions = total\r\n\r\n            }\r\n            count--;\r\n        });\r\n        //TotalCorrectedQuestions = this.state.TotalCorrectedQuestions[0].TotalQuestions = total\r\n        this.setState({ TotalCorrectedQuestions: TotalCorrectedQuestions });\r\n        console.log('TotalCorrectedQuestions', this.state.TotalCorrectedQuestions);\r\n        this.setState({ CurrentQuestion: CurrentQuestion });\r\n        console.log('CurrentQuestion is', this.state.CurrentQuestion);\r\n        this.setState({ chatArray: chatData });\r\n        console.log('chatArray is', this.state.chatArray)\r\n\r\n    }\r\n\r\n    //Verify answer when user choose any option\r\n    CheckAnswer(msg) {\r\n        let TotalCorrectedQuestions = this.state.TotalCorrectedQuestions;\r\n        let total2;\r\n        let res;\r\n        let rowID;\r\n        console.log('Inside check ans', msg)\r\n        let CurrentQuestion = this.state.CurrentQuestion;\r\n        console.log('Inside check ans', typeof (CurrentQuestion), CurrentQuestion)\r\n\r\n        //Loop currentQuestions for options\r\n        Object.keys(CurrentQuestion).map(key => {\r\n            console.log('Message is', CurrentQuestion[key].msg)\r\n            if (msg.trim() === CurrentQuestion[key].msg) {\r\n                console.log('correct option', CurrentQuestion[key].choice)\r\n                const choice = CurrentQuestion[key].choice;\r\n                if (choice == CurrentQuestion[key].AnsKey) {\r\n                    rowID = CurrentQuestion[key].key\r\n                    res = 1; //If the selected option is correct\r\n                    total2 = TotalCorrectedQuestions[0].AnsweredQuestions + 1;\r\n                    TotalCorrectedQuestions[0].AnsweredQuestions = total2;\r\n                    console.log('Total2', total2);\r\n                }\r\n                else {\r\n                    rowID = CurrentQuestion[key].key\r\n                    res = 2; //If the selected option is wrong\r\n                }\r\n            }\r\n        });\r\n        if (res === 1) {\r\n            return 1 + \",\" + rowID; //sending answer with checked question row ID if the user choosed option is correct\r\n        }\r\n        else {\r\n            return 0 + \",\" + rowID; //sending answer with checked question row ID if the user choosed option is wrong\r\n        }\r\n        // const tifOptions = Object.keys(CurrentQuestion).map(key => \r\n        //     <option value={key}>{CurrentQuestion[key].msg}</option>\r\n        // )\r\n        // console.log('Inside check answerssssssss',tifOptions)\r\n    }\r\n\r\n    CheckForCorrectAns(msg) {\r\n        if (this.state.CurrentQuestion.length) {\r\n            let RowID;\r\n            const res = this.CheckAnswer(msg);\r\n            console.log('result is', res);\r\n            const answer_array = res.split(\",\");\r\n            console.log('answer_array', answer_array)\r\n            const choice = answer_array[0];\r\n\r\n            if (answer_array[1] !== \"undefined\") {\r\n                RowID = answer_array[1];\r\n            }\r\n            else {\r\n                console.log('It isundefined!');\r\n                RowID = 0;\r\n            }\r\n            console.log('choice,RowID', choice, RowID);\r\n            this.setState({ CurrentRowID: [] });\r\n            let CurrentRowID = this.state.CurrentRowID;\r\n            CurrentRowID.push({\r\n                rowID: RowID\r\n            });\r\n            this.setState({ CurrentRowID: CurrentRowID });\r\n            console.log('CurrentRowID', CurrentRowID)\r\n            if (choice == 1) {\r\n                const chatArray = this.state.chatArray.slice();\r\n                chatArray.push({\r\n                    msg: msg,\r\n                    botMsg: false,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                chatArray.push({\r\n                    msg: 'Right Answer',\r\n                    botMsg: true,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                chatArray.push({\r\n                    msg: 'Next Question',\r\n                    botMsg: true,\r\n                    clickable: true,\r\n                    Multioption: false\r\n                });\r\n                this.setState({ chatArray: chatArray });\r\n            }\r\n            else {\r\n                const chatArray = this.state.chatArray.slice();\r\n                chatArray.push({\r\n                    msg: msg,\r\n                    botMsg: false,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                chatArray.push({\r\n                    msg: 'Wrong Answer',\r\n                    botMsg: true,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                chatArray.push({\r\n                    msg: 'See Answer',\r\n                    botMsg: true,\r\n                    clickable: true,\r\n                    Multioption: false\r\n                });\r\n                this.setState({ chatArray: chatArray });\r\n            }\r\n        }\r\n    }\r\n\r\n    checkMultiAns() {\r\n        let TotalCorrectedQuestions = this.state.TotalCorrectedQuestions;\r\n        let total2;\r\n        let RowID;\r\n        let currentRow;\r\n        let AnsKey;\r\n        let checkAns = \"\";\r\n        const chatArray = this.state.chatArray.slice();\r\n        if (this.state.Checkedval.length) {\r\n            if (this.state.CurrentQuestion.length) {\r\n                console.log('currentQuestion inside multi ans',this.state.CurrentQuestion)\r\n                AnsKey = this.state.CurrentQuestion[0].AnsKey;\r\n                console.log('AnsKey',AnsKey)\r\n                currentRow = this.state.CurrentQuestion[0].key;\r\n            }\r\n            let Checkedval = this.state.Checkedval;\r\n            console.log('checkMultiAns', Checkedval)\r\n            Object.keys(Checkedval).map(key => {\r\n                console.log('Checkedval[key].val', Checkedval[key].val);\r\n                if (AnsKey.includes(Checkedval[key].val)) {\r\n                    checkAns = checkAns + Checkedval[key].val\r\n                }\r\n                else {\r\n                    checkAns = checkAns + \"0\"\r\n                }\r\n            });\r\n            console.log('checkAns', checkAns);\r\n        }\r\n        if (checkAns == AnsKey) {\r\n            total2 = TotalCorrectedQuestions[0].AnsweredQuestions + 1;\r\n            TotalCorrectedQuestions[0].AnsweredQuestions = total2;\r\n            RowID = currentRow;\r\n            chatArray.push({\r\n                msg: 'Right Answer',\r\n                botMsg: true,\r\n                clickable: false,\r\n                Multioption: false\r\n            });\r\n            chatArray.push({\r\n                msg: 'Next Question',\r\n                botMsg: true,\r\n                clickable: true,\r\n                Multioption: false\r\n            });\r\n            this.setState({ chatArray: chatArray });\r\n        }\r\n        else {\r\n            RowID = currentRow;\r\n            chatArray.push({\r\n                msg: 'Wrong Answer',\r\n                botMsg: true,\r\n                clickable: false,\r\n                Multioption: false\r\n            });\r\n            chatArray.push({\r\n                msg: 'See Answer',\r\n                botMsg: true,\r\n                clickable: true,\r\n                Multioption: false\r\n            });\r\n            this.setState({ chatArray: chatArray });\r\n        }\r\n        let CurrentRowID = this.state.CurrentRowID;\r\n        CurrentRowID.push({\r\n            rowID: RowID\r\n        });\r\n        this.setState({ CurrentRowID: CurrentRowID });\r\n        console.log('CurrentRowID', CurrentRowID)\r\n    }\r\n\r\n    fetchQuestions(msg) {\r\n        if (msg) {\r\n            let strchck = \"More than one answer is possible\";\r\n            let CurrentRowID = []; // Clearing current row iD   \r\n            let DBQuestions = []; // Clearing selected DB questions\r\n            let SelTopic = this.state.SelTopic;\r\n            const accessToken = localStorage.getItem('accessToken');\r\n            const selTopic = SelTopic[0]; // fetching  selected topic to fetch questions\r\n\r\n            this.setState({ isLoading: true });\r\n\r\n            fetch('/api/v1/getQuestionByTopicAndLevel?topic=' + selTopic + '&difficulty_level=' + msg, {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\", \"Access-Control-Origin\": \"*\",\r\n                    \"Authorization\": \"Bearer \" + accessToken\r\n                },\r\n                //body: JSON.stringify({ 'messageText': msg, 'topic': null })\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    console.log('Questions', data)\r\n\r\n                    this.setState({ isLoading: false });\r\n\r\n                    Object.keys(data).forEach(function (key) {\r\n                        if (data[key].correctAnswer.length > 1) {\r\n                            DBQuestions.push({\r\n                                questionText: data[key].questionText,\r\n                                answerChoice1: data[key].answerChoice1,\r\n                                answerChoice2: data[key].answerChoice2,\r\n                                answerChoice3: data[key].answerChoice3,\r\n                                answerChoice4: data[key].answerChoice4,\r\n                                answerChoice5: data[key].answerChoice5,\r\n                                answerChoice6: data[key].answerChoice6,\r\n                                answerChoice7: data[key].answerChoice7,\r\n                                answerDescription: data[key].answerDescription,\r\n                                correctAnswer: data[key].correctAnswer,\r\n                                Questions: true,\r\n                                MultipleAns: true\r\n                            });\r\n                        }\r\n                        else {\r\n                            DBQuestions.push({\r\n                                questionText: data[key].questionText,\r\n                                answerChoice1: data[key].answerChoice1,\r\n                                answerChoice2: data[key].answerChoice2,\r\n                                answerChoice3: data[key].answerChoice3,\r\n                                answerChoice4: data[key].answerChoice4,\r\n                                answerChoice5: data[key].answerChoice5,\r\n                                answerChoice6: data[key].answerChoice6,\r\n                                answerChoice7: data[key].answerChoice7,\r\n                                answerDescription: data[key].answerDescription,\r\n                                correctAnswer: data[key].correctAnswer,\r\n                                Questions: true,\r\n                                MultipleAns: false\r\n                            });\r\n                        }\r\n                    });\r\n                    this.setState({ CurrentRowID: CurrentRowID });\r\n                    this.setState({ DBQuestions: DBQuestions }); //Inserting Question with options to DBQuestions\r\n                    const chatArray = this.state.chatArray.slice();\r\n                    chatArray.push({\r\n                        msg: msg,\r\n                        botMsg: false,\r\n                        clickable: false,\r\n                        Multioption: false\r\n                    });\r\n                    this.setState({ chatArray: chatArray }); //Adding selected questions levels to chatarray\r\n                    this.UploadQuestions(msg); //Calling upload question to add first question to ChatArray\r\n                });\r\n\r\n        }\r\n    }\r\n\r\n    //Fetch question levels using selected topic\r\n    fetchQuestionLevels(msg) {\r\n        if (msg) {\r\n            let SelTopic = [];\r\n            SelTopic.push(msg);\r\n            const accessToken = localStorage.getItem('accessToken');\r\n            this.setState({ SelTopic: SelTopic }); //Storing the selected topic into state object to use in fetech questions APi\r\n            console.log('SelTopic is', SelTopic)\r\n            console.log('inside fetch', msg)\r\n\r\n            this.setState({ isLoading: true });\r\n\r\n            fetch('/api/v1/getDifficultyLevelByTopic?topic=' + msg, {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\", \"Access-Control-Origin\": \"*\",\r\n                    \"Authorization\": \"Bearer \" + accessToken\r\n                },\r\n                //body: JSON.stringify({ 'messageText': msg, 'topic': null })\r\n            }).then((res) => res.json())\r\n                .then((data) => {\r\n\r\n                    let temparr = [];\r\n                    this.setState({ isLoading: false });\r\n\r\n                    console.log('Difflevels', data)\r\n                    let chatData = this.state.chatArray\r\n                    chatData.push({\r\n                        msg: \"Please select difficulty levels\",\r\n                        botMsg: true,\r\n                        clickable: false\r\n                    });\r\n                    this.setState({ selectedvalue: data[0] })\r\n                    console.log('initial selection : ', this.state.selectedvalue)\r\n                    {\r\n                        temparr.push()\r\n                        data.map(diiflevels => (\r\n                            temparr.push(\r\n                                <form>\r\n                                    <FormControlLabel\r\n                                        control={<Radio />}\r\n                                        label={diiflevels}\r\n                                        value={diiflevels}\r\n                                        name=\"groupname\"\r\n                                        //checked={this.state.selectedvalue==diiflevels}\r\n                                        onChange={this.rdlevelchange}\r\n                                    />\r\n                                </form>\r\n\r\n                                //     <form >\r\n                                //          <input\r\n                                //        type=\"radio\"                              \r\n                                //        value={diiflevels}\r\n                                //        name=\"level\"\r\n                                //        onChange={this.rdlevelchange}\r\n                                //         //checked={this.state.rdchklevel==diiflevels}                                \r\n                                //   />\r\n                                //     <label>\r\n                                //         {diiflevels}\r\n                                //     </label>                             \r\n                                //   </form>\r\n                            )\r\n                        ))\r\n                        //console.log('inside temparr',temparr)\r\n                    };\r\n\r\n                    chatData.push({\r\n                        msg: temparr,\r\n                        botMsg: true,\r\n                        clickable: false,\r\n                        Qlevels: true,// to identify the pushed text is Question levels\r\n                        Multioption: false\r\n                        //choice: 1\r\n                    })\r\n                    chatData.push({\r\n                        msg: \"Submit Level\",\r\n                        botMsg: true,\r\n                        clickable: true,\r\n                        Qlevels: true,\r\n                        Multioption: false\r\n                        //choice: 1\r\n                    })\r\n\r\n                    // chatData.push({\r\n                    //      msg: this.state.selectedvalue,\r\n                    //         botMsg: false,\r\n                    //         clickable: true,\r\n                    //         Qlevels: true,\r\n                    //          Multioption: false\r\n                    //          //choice: 1\r\n                    //      })\r\n\r\n                    this.pushToChat(chatData);\r\n                });\r\n            const chatArray = this.state.chatArray.slice();\r\n            chatArray.push({\r\n                msg: msg,\r\n                botMsg: false,\r\n                clickable: false,\r\n                Multioption: false\r\n            });\r\n            this.setState({ chatArray: chatArray });\r\n        }\r\n    }\r\n\r\n\r\n    //Fetch topic from db when user clicks on topic\r\n    fetchTopic(msg) {\r\n\r\n        if (msg) {\r\n            let selTopic = [];\r\n            let DBQuestions = [];\r\n            let CurrentQuestion = [];\r\n            let CurrentRowID = [];\r\n            let Checkedval = [];\r\n            let temptoparr = [];\r\n            const accessToken = localStorage.getItem('accessToken');\r\n\r\n            this.setState({ isLoading: true });\r\n\r\n            console.log('isloading', this.state.isLoading)\r\n            console.log('accessToken', JSON.stringify(accessToken));\r\n            console.log('fetch topic is called')\r\n            //Topic API\r\n            fetch('/api/v1/getTopics', {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\", \"Access-Control-Origin\": \"*\",\r\n                    \"Authorization\": \"Bearer \" + accessToken\r\n                }\r\n\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n\r\n                    this.setState({ isLoading: false });\r\n\r\n                    console.log('topics', data)\r\n                    let chatData = this.state.chatArray\r\n                    chatData.push({\r\n                        msg: \"Please select topic\",\r\n                        botMsg: true,\r\n                        clickable: false\r\n                    });\r\n\r\n                    let thistopic = this\r\n                    Object.keys(data).forEach(function (key) {\r\n                        //console.log(\"key-->\"+key)\r\n                        if (data[key].topic != \"\") {\r\n\r\n                            temptoparr.push(\r\n                                <form>\r\n                                    <FormControlLabel\r\n                                        control={<Radio />}\r\n                                        label={data[key].topic}\r\n                                        value={data[key].topic}\r\n                                        name=\"groupname\"\r\n                                        //checked={this.state.selectedvalue==diiflevels}\r\n                                        onChange={thistopic.rdlevelchange}\r\n                                    />\r\n                                </form>\r\n                            )\r\n                        }\r\n                    });\r\n\r\n                    chatData.push({\r\n                        msg: temptoparr,\r\n                        botMsg: true,//Msg is from bot\r\n                        clickable: false, //Make bubble clickable\r\n                        Topic: true, //Identify the pushed text is topic\r\n                        Multioption: false\r\n                    });\r\n\r\n\r\n                    chatData.push({\r\n                        msg: \"Submit Topic\",\r\n                        botMsg: true,//Msg is from bot\r\n                        clickable: true, //Make bubble clickable\r\n                        Topic: true, //Identify the pushed text is topic\r\n                        Multioption: false\r\n                    });\r\n\r\n                    this.pushToChat(chatData);\r\n\r\n                });\r\n            //Add selected topic to chatbox to display\r\n            const chatArray = this.state.chatArray;\r\n            chatArray.push({\r\n                msg: msg,\r\n                botMsg: false,\r\n                clickable: false,\r\n                Multioption: false\r\n            });\r\n\r\n            //await this.clear();\r\n            //Resetting state objects\r\n            this.setState({ selTopic: selTopic });\r\n            this.setState({ DBQuestions: DBQuestions });\r\n            this.setState({ CurrentQuestion: CurrentQuestion });\r\n            this.setState({ CurrentRowID: CurrentRowID });\r\n            this.setState({ Checkedval: Checkedval });\r\n            console.log('SelTopic', this.state.SelTopic);\r\n            console.log('DBQuestions', this.state.DBQuestions);\r\n            console.log('CurrentQuestion', this.state.CurrentQuestion);\r\n            console.log('CurrentRowID', this.state.CurrentRowID);\r\n            this.setState({ chatArray: chatArray });\r\n            console.log('chatArray', chatArray)\r\n        }\r\n    }\r\n\r\n    handleSend(msg) {\r\n        const accessToken = localStorage.getItem('accessToken');\r\n        console.log(JSON.stringify(accessToken))\r\n        if (!accessToken) {\r\n            let chatArray = this.state.chatArray;\r\n            chatArray.push({\r\n                msg: msg,\r\n                botMsg: false,\r\n                clickable: false,\r\n                Multioption: false\r\n            });\r\n            chatArray.push({\r\n                msg: 'Please login',\r\n                botMsg: true,\r\n                clickable: false,\r\n                Multioption: false\r\n            });\r\n            this.setState({ chatArray: chatArray })\r\n        }\r\n        else {\r\n            this.handleSendMsg(msg);\r\n        }\r\n    }\r\n\r\n    handleSendMsg(msg) {\r\n        if (msg) {\r\n\r\n            let selectedQoption = this.state.selectedQoption\r\n\r\n            if (msg.toUpperCase().trim() === \"TOPIC\") {\r\n                this.fetchTopic(msg)\r\n            }\r\n            //Call question difficulty levels\r\n            // else if (this.state.chatArray.some(item => msg.trim() === item.msg && item.Topic === true)) {\r\n            else if (msg.trim() === \"Submit Topic\") {\r\n                console.log('inside elseif loop')\r\n                this.fetchQuestionLevels(this.state.selectedvalue);\r\n            }\r\n            //call Questions\r\n\r\n            //else if (this.state.chatArray.some(item => msg.trim() === item.msg && item.Qlevels === true)) {\r\n            else if (msg.trim() === \"Submit Level\") {\r\n                //console.log('inside handlesend chat array',chatArray)\r\n                \r\n                this.fetchQuestions(this.state.selectedvalue);\r\n            }\r\n            //Check for answers\r\n            // else if (this.state.CurrentQuestion.some(item => msg.trim() === item.msg && item.Qoptions === true)) {\r\n            else if (msg.trim() === \"Submit Option\") {\r\n                this.CheckForCorrectAns(selectedQoption);\r\n            }\r\n            //When users click on next topic\r\n            else if (msg.trim() === \"Next Question\") {\r\n                let chatArray = this.state.chatArray;\r\n                chatArray.push({\r\n                    msg: msg,\r\n                    botMsg: false,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                this.setState({ chatArray: chatArray })\r\n\r\n                this.UploadQuestions(msg);\r\n            }\r\n            //When user clicks on see answers\r\n            else if (msg.trim() === \"See Answer\") {\r\n                let chatArray = this.state.chatArray;\r\n                chatArray.push({\r\n                    msg: msg,\r\n                    botMsg: false,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                this.setState({ chatArray: chatArray })\r\n                this.UploadAnswer(msg);\r\n            }\r\n            else if (msg.trim() == \"Submit\") {\r\n                let chatArray = this.state.chatArray;\r\n                \r\n                chatArray.push({\r\n                    msg: \"Submit\",\r\n                    botMsg: false,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                this.setState({ chatArray: chatArray })\r\n                console.log('inside seleted multi',this.state.Checkedval)\r\n                this.checkMultiAns();\r\n            }\r\n            //For un wanted text\r\n            else {\r\n                let chatArray = this.state.chatArray;\r\n                chatArray.push({\r\n                    msg: msg,\r\n                    botMsg: false,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                chatArray.push({\r\n                    msg: 'Plase enter relevent message!',\r\n                    botMsg: true,\r\n                    clickable: false,\r\n                    Multioption: false\r\n                });\r\n                this.setState({ chatArray: chatArray });\r\n                this.componentDidMount();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    handleCheck(val) {\r\n        console.log('checked box is', val);\r\n        let Checkedval = this.state.Checkedval;\r\n        Checkedval.push({\r\n            val: val\r\n        });\r\n        this.setState({ Checkedval: Checkedval });\r\n        // console.log('Checkedval',Checkedval);\r\n    }\r\n\r\n    toggleListening = () => {\r\n        this.setState({ listening: !this.state.listening });\r\n    }\r\n\r\n    operations() {\r\n        this.setState({\r\n            ShowBot: !this.state.ShowBot\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ApplicationContext.Provider value={{ toggleListening: this.toggleListening }}>\r\n                    <Listening hidden={this.state.listening} />\r\n                    <NaviBar className=\"NewChat\" ></NaviBar>\r\n\r\n                    <MainDiv className=\"chatWindow\">\r\n                        <InfoDiv className=\"chatterDiv\">\r\n                            <InfoBox\r\n                                AnsweredQuestions={this.state.TotalCorrectedQuestions[0].AnsweredQuestions}\r\n                                TotalQuestions={this.state.TotalCorrectedQuestions[0].TotalQuestions}\r\n                            />\r\n                        </InfoDiv>\r\n                        <ChatDiv>\r\n                            <header className=\"headers\"><img src=\"/assets/logobot.png\" width=\"40px\" height=\"40px\"></img>  ALA</header>\r\n                            <ChatBox chatArray={this.state.chatArray} onClick={(msg) => this.handleSend(msg)} onCheck={(val) => this.handleCheck(val)}></ChatBox>\r\n                            {this.state.isLoading && <LoadingDots></LoadingDots>}\r\n                            <MsgBox onSend={(msg) => this.handleSend(msg)}></MsgBox>\r\n                        </ChatDiv>\r\n                    </MainDiv>\r\n                </ApplicationContext.Provider>\r\n\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport { Bot } from './Bot';\r\nimport Login from './Components/LoginModal';\r\nimport Rigister from './Components/SignupModal';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Switch>\r\n          {/* <Route path=\"/signup\" component={Rigister}></Route>\r\n          <Route path=\"/login\" component={Login}></Route> */}\r\n          <Route component={Bot}></Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}