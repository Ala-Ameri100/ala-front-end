{"version":3,"sources":["Components/Navibar.js","Components/ChatBubble.js","Components/ChatBox.js","Components/MsgBox.js","Bot.js","App.js","serviceWorker.js","index.js"],"names":["NaviBar","Navbar","bg","variant","Brand","href","Bubble","styled","div","props","botMsg","ChatBubble","text","Chat","ChatBox","this","messagesEnd","scrollIntoView","behavior","id","chatArray","map","chat","index","key","message","style","float","clear","ref","el","Component","Msg","MsgBox","state","value","handleChange","bind","handleEnter","handleSend","event","setState","target","onSend","onKeyUp","onChange","Button","onClick","MainDiv","Bot","clickable","fetch","then","res","json","data","answer","forEach","msg","push","method","headers","body","JSON","stringify","slice","App","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5872a87.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nexport const NaviBar = () => (\r\n    <>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"/\">\r\n                ALA\r\n            </Navbar.Brand>\r\n        </Navbar>\r\n    </>\r\n);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Bubble = styled.div`\r\n    min-width: 20%;\r\n    max-width: 70%;\r\n    background-color: ${props => props.botMsg ? \"#0069d9\" : \"#181a1b\"};\r\n    border-radius: ${props => props.botMsg ? \"0px 7px 7px 7px\" : \"7px 0px 7px 7px\"};\r\n    margin: 5px;\r\n    align-self: ${props => props.botMsg ? \"flex-start\" : \"flex-end\"};\r\n\r\n    p {\r\n        padding: 5px;\r\n        color: white;\r\n    }\r\n`;\r\n\r\nexport const ChatBubble = (props) => (\r\n    <Bubble botMsg={props.botMsg}>\r\n        <p>{props.text}</p>\r\n    </Bubble>\r\n);","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport { ChatBubble } from './ChatBubble';\r\n\r\nconst Chat = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    height: 85%;\r\n    background-color: #252729;\r\n    overflow-y: auto;\r\n    padding: 5px;\r\n`;\r\n\r\nexport class ChatBox extends Component {\r\n\r\n    componentDidUpdate() {\r\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Chat id=\"chatDiv\">\r\n                {this.props.chatArray.map((chat, index) => {\r\n                    return <ChatBubble key={index} text={chat.message} botMsg={chat.botMsg}></ChatBubble>\r\n                })}\r\n                <div style={{ float: \"left\", clear: \"both\" }}\r\n                    ref={(el) => { this.messagesEnd = el; }}>\r\n                </div>\r\n            </Chat>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst Msg = styled.div`\r\n    display: flex;\r\n    height: 15%;\r\n    background: #181a1b;\r\n    width: 100%;\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    align-items: end;\r\n\r\n    textarea {\r\n        resize: none;\r\n        width: 100%;\r\n        height: 100%;\r\n        border: none;\r\n        margin: 0px 5px 0px 5px;\r\n        padding: 5px;\r\n        background-color: #181a1b;\r\n        color: white;\r\n    }\r\n    \r\n    div {\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n\r\n        button {\r\n            margin: 5px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport class MsgBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleEnter = this.handleEnter.bind(this);\r\n        this.handleSend = this.handleSend.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleEnter(event) {\r\n        if (event.key === 'Enter') {\r\n            this.handleSend();\r\n        }\r\n    }\r\n\r\n    handleSend() {\r\n        const value = this.state.value;\r\n        this.props.onSend(value);\r\n        this.setState({\r\n            value: \"\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Msg>\r\n                <textarea value={this.state.value} onKeyUp={this.handleEnter} onChange={this.handleChange}></textarea>\r\n                <div>\r\n                    <Button variant=\"outline-primary\" onClick={this.handleSend}>Send</Button>\r\n                    <Button variant=\"outline-success\">Voice</Button>\r\n                </div>\r\n            </Msg>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport { NaviBar } from './Components/Navibar';\r\nimport { ChatBox } from './Components/ChatBox';\r\nimport { MsgBox } from './Components/MsgBox';\r\n\r\nconst MainDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    height: calc(100vh - 56px);\r\n    background-color: #181a1b;\r\n`;\r\n\r\nexport class Bot extends Component {\r\n\r\n    componentDidMount() {\r\n        fetch('/welcome').then((res) => res.json()).then((data) => {\r\n            let chatArray = [];\r\n            data.answer.forEach(msg => {\r\n                chatArray.push({\r\n                    message: msg,\r\n                    botMsg: true,\r\n                    clickable: false\r\n                });\r\n            });\r\n            this.setState({ chatArray: chatArray });\r\n        });\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chatArray: [\r\n                {\r\n                    message: \"Hi! I am your bot.\",\r\n                    botMsg: true,\r\n                    clickable: false\r\n                },\r\n                {\r\n                    message: \"What can i help you with.\",\r\n                    botMsg: true,\r\n                    clickable: false\r\n                },\r\n                {\r\n                    message: \"Hello bot, i am your dad.\",\r\n                    botMsg: false,\r\n                    clickable: false\r\n                },\r\n                {\r\n                    message: \"This is a longer message to check what is happening with the css.\",\r\n                    botMsg: false,\r\n                    clickable: false\r\n                },\r\n            ]\r\n        };\r\n    }\r\n\r\n    handleSend(msg) {\r\n        if (msg) {\r\n            fetch('/query', {\r\n                method: 'POST',\r\n                headers: { \"Content-Type\": \"application/json\", \"Access-Control-Origin\": \"*\" },\r\n                body: JSON.stringify({ 'messageText': msg, 'topic': null })\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    data.answer.forEach(msg => {\r\n                        chatArray.push({\r\n                            message: msg,\r\n                            botMsg: true,\r\n                            clickable: false\r\n                        });\r\n                    });\r\n                    this.setState({ chatArray: chatArray });\r\n                });\r\n            const chatArray = this.state.chatArray.slice();\r\n            chatArray.push({\r\n                message: msg,\r\n                botMsg: false,\r\n                clickable: false\r\n            });\r\n            this.setState({ chatArray: chatArray });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NaviBar></NaviBar>\r\n                <MainDiv>\r\n                    <ChatBox chatArray={this.state.chatArray}></ChatBox>\r\n                    <MsgBox onSend={(msg) => this.handleSend(msg)}></MsgBox>\r\n                </MainDiv>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Bot } from './Bot';\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route component={Bot}></Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}